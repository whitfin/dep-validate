#!/usr/bin/env node
var dv = require('../');

// define our collection for 'only'
function collect(val, only) {
  only = only || [];
  only.push(val);
  return only;
}

// define hardcoded verification
function hardcoded(val) {
  return val !== 'disallow';
}

// start our cli application
var cli = require('commander');

// define our interface
cli
  .version(require('../package.json').version, '-v, --version')
  .option('--deps, --dependencies [range]', 'range to enforce on production dependencies', undefined, undefined)
  .option('--devDeps, --devDependencies [range]', 'range to enforce on development dependencies', undefined, undefined)
  .option('--hardcoded [value]', 'validate against hardcoded versions or not', hardcoded, undefined)
  .option('-e, --exclude [value]', 'ependencies to exclude from validation', collect, undefined)
  .option('-o, --only [value]', 'only use production or development dependencies', collect, undefined)
  .option('-p, --packageFile [file]', 'path to a package file to validate', undefined, undefined)
  .parse(process.argv);

// validate using the provided options
var results = dv.validate({
  allowHardcoded: cli['hardcoded'],
  dependencies: cli['dependencies'],
  devDependencies: cli['devDependencies'],
  exclude: cli['exclude'],
  packageFile: cli['packageFile'],
  only: cli['only']
});

// check for errors
var hasErrors = dv
  .hasErrors(results);

// log any errors as needed
hasErrors && dv.log(results);

// exit with error codes as needed
process.exit(+(hasErrors !== 0));
